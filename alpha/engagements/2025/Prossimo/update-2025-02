# Rust for Linux

Please find below our February 2025 update for Internet Security Research Group (ISRG)’s Prossimo “Rust for Linux” project.

**About the project:**
Our goal for the [Rust for Linux](https://rust-for-linux.com/) project is to add support for the memory safe Rust language to the Linux kernel, in order to improve the security and reliability of billions of devices and computer systems that use the Linux kernel around the world. Rust was merged into the open source Linux kernel in late 2022, which was a key milestone towards that goal. Thanks to support from Alpha-Omega, ISRG is working with the primary maintainer of Rust for Linux, Miguel Ojeda, to continue to improve the support for Rust in the Linux kernel so that the first major Rust production drivers can be merged upstream.

**February 2025 Highlights:**
In February, we published the Rust kernel policy [1], which was widely discussed [2] among the kernel community. The Rust kernel policy was published in order to clarify a number of questions around Rust for Linux, in light of the refusal by a kernel maintainer to accept Rust abstractions that are required by many future users of Rust in the Linux kernel. The event generated widespread discussions among the kernel community as well as related media, which in turn resulted in extra clarity for everyone involved and eventually Rust for Linux was unblocked.

Also this month, Miguel Ojeda delivered a Rust for Linux keynote [3] at FOSDEM [4]. The keynote included a survey of kernel maintainers and other external stakeholders about their thoughts on the state and future of Rust in the kernel. FOSDEM is one of the biggest technical conferences in Europe (~8000 attendees). A keynote at such a conference is a great opportunity for the Rust for Linux project to gain visibility and thus eventually support from new contributors and companies.

Additionally, a couple Rust fixes PRs [5][6] for the Linux v6.14 kernel cycle were prepared and sent. The regular Rust PR for the next cycle is being prepared. The regular Rust PRs sent each kernel cycle (as well as the “fixes” PRs), represent the combined work from a multitude of developers and several major companies that adds and maintains the required features (such as Rust abstractions for kernel C APIs) that the first major Rust production drivers need.

[1] https://rust-for-linux.com/rust-kernel-policy
[2] https://lore.kernel.org/rust-for-linux/CANiq72m-R0tOakf=j7BZ78jDHdy=9-fvZbAT8j91Je2Bxy0sFg@mail.gmail.com/
[3] https://fosdem.org/2025/schedule/event/fosdem-2025-6507-rust-for-linux/
[4] https://lwn.net/Articles/1007921/
[5] https://lore.kernel.org/rust-for-linux/20250208175817.45181-1-ojeda@kernel.org/
[6] https://lore.kernel.org/rust-for-linux/20250215170845.80764-1-ojeda@kernel.org/

**February 2025 Additional Work Undertaken:**
Beyond what is highlighted above, we continued work toward the below, all aimed at improving the support for Rust in the Linux kernel so that the first major Rust production drivers can be merged upstream.

  - We continued maintenance of the development branch by applying/reviewing/testing patches, reproducing issues, and maintaining the CIs. 

  - As part of our work maintaining Rust support in the stable kernels, we backported Rust fixes when required and tested the branches with Rust enabled.

  - We maintained other subsystem maintenance, including reporting issues to other projects (e.g. the Rust compiler and `bindgen`) and maintaining the ["live lists"](https://github.com/Rust-for-Linux/linux/issues/2), which track bugfixes, wanted features, and unstable features from other projects.

  - We furthered technical development of Rust in the Linux kernel via continued development of the new build system.

  - We performed Rust for Linux core team management via maintenance of the internal spreadsheets of the team (that track the status of all patch series, PRs, versioning, etc.), onboarding new team members, organizing and leading the core team weekly meetings, and keeping track of news relevant for the team.

  - We supported building the Rust Community by meeting with interested parties (including companies and kernel maintainers), maintaining relationships with other projects, guiding new contributors, and spent time organizing the Rust for Linux [Kangrejos](https://kangrejos.com) conference, as well as writing new content and keeping the [Rust for Linux webpage](https://rust-for-linux.com) up to date.
